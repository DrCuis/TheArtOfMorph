@node Design Morph by reuse
@chapter Design Morph by reuse

@*

In this chapter you will learn how to design new morph -- in the idea
of a new widget -- by assembling existing ones. We first illustrate
the topic with existing morphs from the @cuis{} system and the
@label{Cuis-Smalltalk-UI} repository. Then we dive-in the design of a
new morph -- a file selector -- gradually improving it from a quick
design in a @label{Workspace} to a class of its own. Finally, its
design is bullet proof tested by reusing it in an end-user
@acronym{GUI}.


@menu
* From where to start?::
* Layout::
* Scroll pane::
@end menu



@cindex morph @subentry subclasses
@node From where to start?
@section From where to start?

Design by reuse indeed, but from where to start? Which classes should
we make reuse from? As often, the @cuis{} system may be our best
guide, let's interrogate it to learn which morph has more subclasses.

We collect, for each existing morph in the @cuis{} system, the
quantity of subclasses, then we sort the result.

@smalltalkExample{| hallOfFame |
hallOfFame @assign{} Morph allSubclasses collect: [:each |
   Array with: each with: each subclasses size].
hallOfFame @assign{} hallOfFame sort: [:array1 :array2 | array1 second > array2 second]}

@figure{The hall of fame of morph subclasses count,ch02-hallOfFame,6}

Let's analyze some top ranked morphs:

@enumerate
@item
@class{PlacedMorph}. Its subclasses need to override the
@method{drawOn:} method. So not a candidate to design morph by reuse.

@item
@class{BorderedMorph}, @class{ColoredBoxMorph} and
@class{BoxMorph}. Those classes are @class{PlacedMorph} with a few
additional characteristics. Subclassing these classes will require
most of the time overriding the @method{drawOn:} method.

@item
@class{LinearLayoutMorph}. It has 11 subclasses. It is designed to
assemble morphs in a new morph, using this class for reuse makes
perfectly sense and we already know how to use it.

@item
@class{SystemWindow}. As a view representing a whole application,
subclassing it makes sense to implement specific behaviors of one GUI
application, but not as a morph you can reuse as a widget. 

@cindex morph @subentry @class{PluggableMorph}
@item
@class{PluggableMorph}. It seems very generic, may be a good
candidate. It represents a view of an associated model, however its
subclasses need to implement a specific @method{drawOn:} method. We
may want to use it when designing a morph from scratch.

@cindex morph @subentry @class{PluggableScrollPane}
@item
@class{PluggableScrollPane}. This morph encapsulates an arbitrary
morph -- called a @emph{scroller} -- in a pane with optional
scrollbars when the scroller extent is too large. It is very handy,
and in some circumstances it makes sense to subclass it.

@end enumerate

All in all, we have two candidates to subclass when conceiving a morph
by reuse: @class{LinearLayoutMorph} and @class{PluggableScrollPane}.

@cindex morph @subentry layout
@node Layout
@section Layout
This section will be very familliar with the booklet @emph{Design GUI
with Morph}, and it is a good idea to read its @url{Layout
components,https://DrCuis.github.io/DesignGUI/Layout-components.html}
chapter before.

Arranging a set of morphs is what does the @class{LinearLayoutMorph}
class, therefore it makes sense to define a new morph based on layout
then to install a set of morphs into. This is exactly what does the
@class{LabelGroup} class of the @label{Cuis-Smalltalk-UI} package.


@cindex layout @subentry group of morphs
@cindex morph @subentry label
@cindex layout @subentry @class{LabelGroup}
@subsection Arrange visually

This subclass of @class{LinearLayoutMorph} takes a collection of
textual descriptions and morphs to arrange them in two columns of
labels and morphs. The idea is to give a label to widgets presented in
a view.

@figure{A group of three morphs@comma{} each with its own
label,ch02-labelGroup,9}

In one layout column, the label group arranges nicely each label and
widget couple in a row so that all the label cells are of same
width. What it takes is a collection of label and morph
associations. The returned layout is to be added in a higher level
view.

@smalltalkMethod{LabelGroup class>>example1,
@return{} self with: @{
   'Name' -> (LabelMorph contents: 'send $25 for your name here').
   'Description which is very long...' -> (
      TextModelMorph withText: '' :: emptyTextDisplayMessage: 'Why Smalltalk?').
   'Smalltalk variants' -> (
      PluggableListMorph
         withModel: (ListModel with: #('Cuis-Smalltalk' 'Pharo' 'Squeak' 'Amber')) 
         listGetter: #list 
         indexGetter: #listIndex 
         indexSetter: #listIndex: ) @} ::
   color: Color white paler ;
   yourself}

The @class{LabelGroup} is a passive object, its only purpose is to
arrange visually morphs: all the user interactions are managed by the
widgets. However, in some circumstance, we want both to arrange
widgets and be notified about specific user interactions. This is what
does the @class{CheckGroup} and @class{RadioGroup} classes.


@cindex morph @subentry event
@cindex morph @subentry @class{CheckGroup}
@cindex morph @subentry @class{RadioGroup}
@subsection Be notified

Once morphs are arranged in a layout, it makes sense to be notified
through events when the user interacts with some of the arranged
morphs. Under this perspective, the @class{LabelGroup} class is
absolutely passive, contrary to the @class{CheckGroup} class we will
present now.

As a @class{LabelGroup}, a @class{CheckGroup} presents a collection of
labels with associated widgets, here @class{CheckButtonMorph}. In a
@class{CheckGroup}, zero or more @class{CheckButtonMorph} can be
selected at once. In a @class{RadioGroup}, a subclass, only one
@class{RadioButtonMorph} is selected at once.

@figure{A check group to select among the baby squeaks,ch02-checkGroup,3}

Creating a check group only requires a collection of
labels@footnote{As an alternative to textual label, arbitrary morphs
can be used instead.}:

@smalltalkMethod{CheckGroup class>>example1,
| group |
group := self fromList: #('Cuis-Smalltalk' 'Pharo' 'Squeak').
group buttons do: [:each | 
   each when: #checkSelection send: #show: to: Transcript].
@return{} group}

In the example, the @smalltalk{#checkSelection} event emitted by each
check button is captured for report purpose. The attentive reader will
observe this event is not specific to the check group. Indeed, the
check group itself emits another specific event
@smalltalk{#informCheckSelection} when a button is selected:

@smalltalkMethod{CheckGroup>>newSelection: radioButton,
" Inform we have a new selection "
self triggerEvent: #informCheckSelection with: (self symbolForButton: radioButton)}
	
The event is triggered with the button label as attribute. To observe
its use, experiment with the method @smalltalk{CheckGroup
class>>example2}.

@cindex morph @subentry @class{PluggableScrollPane}
@node Scroll pane
@section Scroll pane
@c Present use case
Compared to the @class{LinearLayoutMorph} class, the
@class{PluggableScrollPane} class doesn't have much subclasses. We
found ones for all sort of list of items or text editor with need to
scroll contents.

This class doesn't need to be subclassed to be useful, each time you
want to present a morph with a large extent, embed it in a scroll
pane:

@smalltalkExampleCaption{Bezier curves on a scroller, bezierScroller,
PluggableScrollPane new ::
   scroller: Sample02Bezier new;
   color: Color white;
   openInWorld}

@figure{A scroll pane encapsulating BÃ©zier curves with scroll bars,ch02-scrollPane,5}

@cindex morph @subentry @class{FlowLayoutMorph}
Among its few subclasses, @class{FlowLayoutMorph} extends the behavior
of the layout morph, but doesn't inherit from, to present a collection
of morphs in a strip spanning in several rows. It is flanked with a
vertical scroll bar, if needed, inherited from the behavior of the
@class{PluggableScrollPane}.

Its use is simple:

@smalltalkMethod{FlowLayoutMoprh class>>example1,
| flow cells |
flow := self new openInWorld.
cells := OrderedCollection new.
50 timesRepeat: [ cells add: (
   ColoredBoxMorph new :: 
      morphExtent: (5 to: 80) atRandom asPoint;
      color: Color random)].
flow cells: cells}

When resizing the morph, particularly its width, the flow of morphs is
updated simultaneously.

@figure{Flow of boxes of various sizes,ch02-flowLayoutMorph,6}

@node File Selector
@section File Selector
So far we have observed existing morphs. Let's now build our own new
morph.

@subsection Poor man implementation
First, let's do something quick and fun: a poor man file selector. All
it takes is to get the entries of a given directory, collect them as
previews and add them all in a flow layout:

@smalltalkExample{| directories |
directories := DirectoryEntry userBaseDirectory children collect: [:anEntry |
   FilePreviewMorph 
      object: anEntry 
      image: ((anEntry isFileEntry ifTrue: [Theme current genericTextIcon] ifFalse: [Theme current fetch: #( '16x16' 'places' 'folder' )]) magnifyTo: 64@@64)
      buttons: nil
      label: anEntry baseName ::
      borderColor: Color transparent;
      color: Color transparent].
FlowLayoutMorph new ::
   openInWorld;
   cells: directories }

Of course at this stage, we can't browse in the directories tree:

@figure{A basic tool to list the files in a folder,ch02-fileSelectorBasic,7}

To add more behavior to our poor man file selector, we want to make
our first morph by reusing existing components.

@cindex morph @subentry @class{FileSelectorPane}
@subsection First morph design by reuse
Our morph presents visually files and directories at a given location
in the disk of the host. As we want this morph to be reused by other
GUI designer, it doesn't present itself in a window but in a simple
surface, a pane. Therefore we name it @class{FileSelectorPane}, it
emits event when the user selects a file. It updates itself with new
contents when the user double-clicks on a folder.

Because we may have numerous files and directories to present, we
create our @class{FileSelectorPane} as a subclass of
@class{FlowLayoutMorph}:

@smalltalkExample{FlowLayoutMorph subclass: #FileSelectorPane
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'ArtOfMorph'}

In its parents hierarchy, our @class{FileSelectorPane} has the
@class{PluggableMorph} ancestor, this one is observing a
@smalltalk{model}. In the present context, the @smalltalk{model}
represents the currently observed @class{DirectoryEntry}. It is set by
default to the user base directory:

@smalltalkMethod{initialize,
super initialize.
self open: DirectoryEntry userBaseDirectory}

When opening a new location, directories and files are collected and
sorted separatly, in two groups, to build meaningful pre-views:

@smalltalkMethod{open: aDirectoryEntry,
| entryViews |
model := aDirectoryEntry.
entryViews := OrderedCollection new.
model isRoot ifFalse: [ | parentView |
   parentView := self entryPreviewFor: model parent.
   parentView relabel: '..' bold.
   entryViews add: parentView].
entryViews 
   addAll: (self previewsFor: model directories);
   addAll: (self previewsFor: model files ).
self cells: entryViews}

The directory and file entries are sorted appropriately and each one
is flanked with a preview:

@smalltalkMethod{previewsFor: entries,
@return{} (entries sort: [:a :b | a baseName asUppercase < b baseName asUppercase ])
      collect: [:anEntry | self entryPreviewFor: anEntry]}

The special directory ``@strong{..}'' above is inserted first for the
user to browse to the parent directory of the @smalltalk{model}.

@cindex morph @subentry @class{FilePreviewMorph}
@cindex event @subentry listener
@cindex event @subentry @msg{when:send:to:with:}
Observe below how each directory preview is listening to the double
click event, in that circumstance the related directory is opened.

@smalltalkMethod{entryPreviewFor: fileEntry,
| fileView |
fileView := FilePreviewMorph 
   object: fileEntry 
   image: ((fileEntry isFileEntry 
      ifTrue: [Theme current genericTextIcon] 
      ifFalse: [Theme current fetch: #( '16x16' 'places' 'folder' )]) magnifyTo: 48@@48)
   buttons: nil
   label: fileEntry baseName ::
   borderColor: Color transparent;
   color: Color transparent.
fileEntry isDirectoryEntry ifTrue: [
   fileView when: #doubleClick send: #open: to: self with: fileEntry].
@return{} fileView }

We are relying on @class{FilePreviewMorph}, a composition of several
morphs, itself emitting events to notify about user activities.
 
To integrate this widget with other morph, particularly to behave as a
file selector, we want it to trigger event when the user selects a
file. A @class{FilePreviewMorph} emits a @smalltalk{#selected} event
each time the user clicks it, let's capture this event to manage it
internally:

@smalltalkMethod{entryPreviewFor: fileEntry,
../..
fileView when: #selected send: #toggleSelection: to: self with: fileView.
@return{} fileView}


@cindex event @subentry emitter
@cindex event @subentry @msg{triggerEvent:}
@cindex event @subentry @msg{triggerEvent:with:}

Then we define the behavior for the @msg{toggleSelection:} message:

@smalltalkMethod{toggleSelection: fileView,
| selectedView |
selectedView := cells detect: [:aFileView | aFileView isSelected] ifNone: [nil].	
selectedView = fileView
   ifTrue: [ " unselect view@comma{} no view selected anymore "
      fileView toggleSelection.
      selectedView := nil]			
   ifFalse: [
      selectedView ifNotNil: [selectedView toggleSelection].
      fileView selected: true.
      selectedView := fileView].
selectedView 
   ifNil: [self triggerEvent: #noSelection]
   ifNotNil: [self triggerEvent: #selectedFile with: selectedView fileEntry]}

To visualise in the @label{Transcript} window the events propagation,
instantiate a new file selector and capture its events:

@smalltalkExample{| selector |
selector := FileSelectorPane new openInWorld.
selector when: #noSelection send: #print to: 'no entry'.
selector when: #selectedFile send: #show: to: Transcript}

@cindex event @subentry @msg{removeAllActions}
@cindex event @subentry remove
To strop listening to events, just send the @msg{removeAllActions}
message to the listener: @smalltalk{selector removeAllActions}.

Morph are both listener and emitter of events. Doing so is important
for decoupling the objects between each others and to improve objects
reuse.

We designed the @class{FileSelectorPane} to be itself reusable in
other morph. In the next section we illustrate its use to improve the
usability of the @class{StringRequestMoprh}, a morph used -- among
other things -- to ask the user to key-in a file name; we want to
improve to make it more user friendly.

@cindex morph @subentry @class{StringRequestMorph}
@subsection Beyond string request morph
As illustrated by the sketch below, the idea is to have a file pane
that expands on user request, the user then selects a file or a
directory directly by pointing it on the pane.

@figure{A sketch depicting a file selector and its behavior,ch02-fileSelectorSketch,10}

Let's extend the behavior of @class{StringRequestMoprh}:

@smalltalkExample{StringRequestMorph subclass: #FileRequestMorph
   instanceVariableNames: 'fileBrowser'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'ArtOfMorph'}

We add an the instance variable @smalltalk{fileBrowser} to hold our
file selector when it is unfolded. We override a few methods from
@class{StringRequestMorph}. We add a button to unfold/fold the file
browser:

@smalltalkMethod{FileRequestMorph>>addTextPane,
super addTextPane.
submorphs first addMorph: 
   ((PluggableButtonMorph model: self action: #toggleFileBrowser)
      setBalloonText: 'Browse the file system to select a file or directory';
      icon: (Theme current fetch: #( '16x16' 'places' 'folder' )) )}

When unfolding the file browser, we check its current status if absent
we instantiate a new one just below the text entry, in the alternative
we just delete it from screen:

@smalltalkMethod{toggleFileBrowser,
fileBrowser ifNotNil: [
   fileBrowser delete.
   fileBrowser := nil.
   ^ self].
fileBrowser := FileSelectorPane new open: self directoryEntry.
fileBrowser when: #selectedFile send: #entry: to: self.
fileBrowser 
   color: (Color white alpha: 0.8);
   morphPosition: self morphPosition + (0 @ (self morphHeight + 5));
   morphExtent: self morphExtent * (1@@5);
   openInWorld}

In this method two important points: the @method{directoryEntry}
method answers the current directory as edited by the user and the
@smalltalk{#selectedFile} event emitted by the
@class{FileSelectorPane} is observed by the @method{entry:}
method. Each time the user selects a file, the message @msg{entry:} is
sent to the @class{FileRequestMorph} instance:

@smalltalkMethod{entry: anEntry,
textMorph hasUnacceptedEdits: false.
response := anEntry asString.
self changed: #response.
textMorph hasUnacceptedEdits: true}



	
@figure{File request morph with file browser unfolded,ch02-FileRequestMorph,10}
