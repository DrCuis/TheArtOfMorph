@node Design Morph by reuse
@chapter Design Morph by reuse

@*

In this chapter you will learn how to design new morph -- in the idea
of a new widget -- by assembling existing ones. This chapter will be
very familliar with the booklet @emph{Design GUI with Morph}, and it
is a good idea to read its @url{Layout
components,https://DrCuis.github.io/DesignGUI/Layout-components.html}
chapter before.


@menu
* From where to start?::
* Layout::
* Scroll pane::
@end menu



@cindex morph @subentry subclasses
@node From where to start?
@section From where to start?

Design by reuse indeed, but from where to start? Which classes should
we make reuse from? As often, the @cuis{} system may be our best
guide, let's interrogate it to learn which morph has more subclasses.

We collect, for each existing morph in the @cuis{} system, the
quantity of subclasses, then we sort the result.

@smalltalkExample{| hallOfFame |
hallOfFame @assign{} Morph allSubclasses collect: [:each |
   Array with: each with: each subclasses size].
hallOfFame @assign{} hallOfFame sort: [:array1 :array2 | array1 second > array2 second]}

@figure{The hall of fame of morph subclasses count,ch02-hallOfFame,6}

Let's analyze some top ranked morphs:

@enumerate
@item
@class{PlacedMorph}. Its subclasses need to override the
@method{drawOn:} method. So not a candidate to design morph by reuse.

@item
@class{BorderedMorph}, @class{ColoredBoxMorph} and
@class{BoxMorph}. Those classes are @class{PlacedMorph} with a few
additional characteristics. Subclassing these classes will require
most of the time overriding the @method{drawOn:} method.

@item
@class{LayoutMorph}. It has 11 subclasses. It is designed to assemble
morphs in a new morph, using this class for reuse makes perfectly
sense and we already know how to use it.

@item
@class{SystemWindow}. As a view representing a whole application,
subclassing it makes sense to implement specific behaviors of one GUI
application, but not as a morph you can reuse as a widget. 

@cindex morph @subentry @class{PluggableMorph}
@item
@class{PluggableMorph}. It seems very generic, may be a good
candidate. It represents a view of an associated model, however its
subclasses need to implement a specific @method{drawOn:} method. We
may want to use it when designing a morph from scratch.

@cindex morph @subentry @class{PluggableScrollPane}
@item
@class{PluggableScrollPane}. This morph encapsulates an arbitrary
morph -- called a @emph{scroller} -- in a pane with optional
scrollbars when the scroller extent is too large. It is very handy,
and in some circumstances it makes sense to subclass it.

@end enumerate

All in all, we have two candidates to subclass when conceiving a morph
by reuse: @class{LayoutMorph} and @class{PluggableScrollPane}.


@node Layout
@section Layout

Arranging a set of morphs is what does the @class{LayoutMorph} class,
therefore it makes sense to define a new morph based on layout then to
install a set of morphs into. This is exactly what does the
@class{LabelGroup} class of the @label{Cuis-Smalltalk-UI} package.


@cindex layout @subentry group of morphs
@cindex morph @subentry label
@cindex layout @subentry @class{LabelGroup}
@subsection Arrange visually

This subclass of @class{LayoutMorph} takes a collection of textual
descriptions and morphs to arrange them in two columns of labels and
morphs. The idea is to give a label to widgets presented in a view.

@figure{A group of three morphs@comma{} each with its own
label,ch02-labelGroup,9}

In one layout column, the label group arranges nicely each label and
widget couple in a row so that all the label cells are of same
width. What it takes is a collection of label and morph
associations. The returned layout is to be added in a higher level
view.

@smalltalkMethod{LabelGroup class>>example1,
@return{} self with: @{
   'Name' -> (LabelMorph contents: 'send $25 for your name here').
   'Description which is very long...' -> (
      TextModelMorph withText: '' :: emptyTextDisplayMessage: 'Why Smalltalk?').
   'Smalltalk variants' -> (
      PluggableListMorph
         withModel: (ListModel with: #('Cuis-Smalltalk' 'Pharo' 'Squeak' 'Amber')) 
         listGetter: #list 
         indexGetter: #listIndex 
         indexSetter: #listIndex: ) @} ::
   color: Color white paler ;
   yourself}

The @class{LabelGroup} is a passive object, its only purpose is to
arrange visually morphs: all the user interactions are managed by the
widgets. However, in some circumstance, we want both to arrange
widgets and be notified about specific user interactions. This is what
does the @class{CheckGroup} and @class{RadioGroup} classes.

@cindex morph @subentry @class{CheckGroup}
@subsection Be notified
As in @class{LabelGroup}, a @class{CheckGroup} presents a collection
of labels with associated widgets, here @class{CheckButtonMorph}.

In a @class{CheckGroup}, zero or more @class{CheckButtonMorph} can be
selected at once, contrary to a @class{RadioGroup} where only one
@class{RadioButtonMorph} is selected at once.

@figure{A check group to select among the baby squeaks,ch02-checkGroup,3}

Creating a check group only requires a collection of
labels@footnote{As an alternative to textual label, arbitrary morphs
can be used instead.}:

@smalltalkMethod{CheckGroup class>>example1,
| group |
group := self fromList: #('Cuis-Smalltalk' 'Pharo' 'Squeak').
group buttons do: [:each | 
   each when: #checkSelection send: #show: to: Transcript].
@return{} group}

In the example, the @smalltalk{#checkSelection} event emitted by each
check button is captured for report purpose. The attentive reader will
observe this event is not specific to the check group. Indeed, the
check group itself emits another specific event
@smalltalk{#informCheckSelection} when a button is selected:

@smalltalkMethod{CheckGroup>>newSelection: radioButton,
" Inform we have a new selection "
self triggerEvent: #informCheckSelection with: (self symbolForButton: radioButton)}
	
The event is triggered with the button label as attribute. To observe
its use, experiment with the method @smalltalk{CheckGroup
class>>example2}.

@cindex morph @subentry @class{PluggableScrollPane}
@node Scroll pane
@section Scroll pane
@c Present use case
Compare to the @class{LayoutMorph} class, the
@class{PluggableScrollPane} class doesn't have much subclasses. We
found ones for all sort of list of items or text editor with need to
scroll contents.

This class doesn't need to be subclassed to be useful, each time you
want to present a morph of a large extent, try to use it:

@smalltalkExampleCaption{Bezier curves on a scroller, bezierScroller,
PluggableScrollPane new ::
   scroller: Sample02Bezier new;
   color: Color white;
   openInWorld}

@cindex morph @subentry @class{FlowLayoutMorph}
Among its few subclasses, @class{FlowLayoutMorph} extends the behavior
of the layout morph, but doesn't inherit from, to present a collection
of morphs in a strip spanning in several rows. It is flanked with a
vertical scroll bar, if needed, inherited from the behavior of the
@class{PluggableScrollPane}.

Its use is simple:

@smalltalkMethod{FlowLayoutMoprh class>>example1,
| flow cells |
flow := self new openInWorld.
cells := OrderedCollection new.
50 timesRepeat: [ cells add: (
   ColoredBoxMorph new :: 
      morphExtent: (5 to: 80) atRandom asPoint;
      color: Color random)].
flow cells: cells}

When resizing the morph, particularly its width, the flow of morphs is
updated simultaneously.

@figure{Flow of boxes of various sizes,ch02-flowLayoutMorph,6}

@c Write a folder viewer morph, should react to event when entering a new folder
@c or double clicking on a file, etc

Now let's do something fun: a poor man file selector. All it takes is
to get the entries of a given directory, collect them as previews and
add them all in a flow layout:

@smalltalkExample{| directories |
directories := DirectoryEntry userBaseDirectory children collect: [:anEntry |
   FilePreviewMorph 
      object: anEntry 
      image: ((anEntry isFileEntry ifTrue: [Theme current genericTextIcon] ifFalse: [Theme current fetch: #( '16x16' 'places' 'folder' )]) magnifyTo: 48@@48)
      buttons: nil
      label: anEntry baseName ::
      borderColor: Color transparent;
      color: Color transparent].
FlowLayoutMorph new ::
   openInWorld ;
cells: directories }

Of course at this stage, we can't browse in the directories tree:

@figure{A basic tool to list the files in a folder,ch02-fileSelectorBasic,7}

To add more behavior to our poor man file selector, we want to
subclass it from @class{FlowLayoutMorph}.

@smalltalkExample{FlowLayoutMorph subclass: #FileSelectorPane
   instanceVariableNames: 'directory'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'ArtOfMorph'}


@node File Selector
@section File Selector
@c Based on previous sections, write this new file selector morph

So far we have observed existing morphs found in @cuis{}
repositories. Let's now build our own new morph.

We suggest to design a file selector morph: its purpose is to let the
user to browse among the folders of the host, then to select a file or
a folder of choice.

It will extend the behavior of the @class{StringRequestMoprh} to add
the option to the user to select a file visually in an unfolded
pane. The sketch below presents this behavior:

@figure{A sketch depicting a file selector and its behavior,ch02-fileSelectorSketch,10}
