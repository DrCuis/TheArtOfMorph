@node Solutions to the Exercises
@appendix Solutions to the Exercises

@menu
* Design from scratch (Solutions)::
@end menu

@c Chapter 2
@node Design from scratch (Solutions)
@unnumberedsec Design from scratch

@subheading @ref{improvedCross}
To avoid the unpleasant overlapping of the two rectangles, all the
drawing operations are to be conducted in an unique stroke. The
polyline summit is then extended to follow the outline of the cross.

@smalltalkMethod{drawOn: aCanvas,
aCanvas strokeWidth: 8 color: Color lightOrange fillColor: Color red do: [
   aCanvas polyLine: @{
      100@@0 . 140@@0 . 140@@100 . 240@@100 . 240@@140 .140@@140 .
      140@@240 . 100@@240 . 100@@140 . 0@@140 . 0@@100 . 100@@100 .
      100@@0 @} ]}

@subheading @ref{medicCrossStep}
To enjoy the update, the @msg{redrawNeeded} is to be sent to @smalltalk{self}.
@smalltalkMethod{step,
width := width + 0.2.
width > 30 ifTrue: [width := 0].
self redrawNeeded}

@subheading @ref{avoidExpensiveCalculus}
The principle is to handle @emph{manually} the indexes and to use the
@method{timesRepeat:} method on integer. It reflects to how it will be
coded with lower level languages.

@smalltalkMethod{drawOn: canvas,
| font grad posX extent step |
../..
step := self ppcm / 2. " half centimeter step "
canvas strokeWidth: 0.8 color: Color black do: [
   posX := 0.
   length + 1 timesRepeat: [
      canvas moveTo: posX @@ 0.5; lineToY: 10.
      canvas moveTo: (posX + step) @@ 0.5 ; lineToY: 6.
      posX := posX + self ppcm] ].

grad := posX := 0.
length + 1 timesRepeat: [
   canvas drawString: grad asString
      atCenterX: posX @@12 font: font color: Color black.
   grad := grad + 1.
   posX := posX + self ppcm]}

@subheading @ref{millimeterRuler}
We add the following code at the end of the method and make the stick
thinner to 0.3 pixel.

@smalltalkMethod{drawOn: canvas,
step := self ppcm / 10. "millimeter step "
canvas strokeWidth: 0.3 color: Color black do: [
   posX := step.
   length * 2 + 1 timesRepeat: [
      4 timesRepeat: [
         canvas moveTo: posX @ 0.2; lineToY: 4.
         posX := posX + step].
      posX := posX + step] ]}
